players_merged:
  type: pandas.SQLQueryDataset
  credentials: db_credentials
  sql: |
    SELECT 

    p.player_name,
    p.total_points,
    p.minutes AS total_minutes,
    p.now_cost,
    p.selected_by_percent,
    p.transfers_in,	
    p.transfers_out,
    p.player_id,
    p.team_id,
    p.position_id,
    p.chance_of_playing_next_round,
    p.form,
    p.web_name,
    p.first_name,
    p.second_name,
    p.points_per_game,
    t.team_name as players_team,
    t.strength as players_team_strength,
    t.strength_overall_home as players_team_strength_home,
    t.strength_overall_away as players_team_strength_away,
    pos.position_name,
    pos.singular_name_short AS position_name_abbr

    FROM players p
    LEFT JOIN teams t ON p.team_id = t.team_id
    LEFT JOIN positions pos ON p.position_id = pos.position_id

  
players_hist_merged:
  type: pandas.SQLQueryDataset
  credentials: db_credentials
  sql: |
    -- Step 1: Aggregate total stats per player
    WITH player_totals AS (
        SELECT
            player_id,
            SUM(minutes) AS total_minutes,
            SUM(total_points) AS total_points,
            SUM(transfers_in) AS total_transfers_in,
            SUM(transfers_out) AS total_transfers_out,
            SUM(ict_index) AS total_ict_index
        FROM players_hist
        GROUP BY player_id
    )

    -- Step 2: Join back to players_hist for per-round info and compute cumulative sums
    SELECT
        ph.player_id,
        p.web_name,
        p.first_name,
        p.second_name,
        p.player_name,
        ph.team_id,
        t.team_name AS players_team,
        ph.opponent_team AS opponent_team_id,
        op_t.team_name AS opponent_team,
        ph.was_home,
        ph.team_a_score,
        ph.team_h_score,
        ph.round,
        ph.minutes AS round_minutes,
        ph.total_points AS round_points,
        ph.value AS transfer_cost,
        ph.transfers_balance,
        ph.selected,
        ph.transfers_in,
        ph.transfers_out,
        ph.ict_index,
        totals.total_minutes,
        totals.total_points,
        totals.total_transfers_in,
        totals.total_transfers_out,
        ph.position_id,
        pos.position_name,
        pos.singular_name_short AS position_name_abbr,
        
        -- cumulative sums per round
        SUM(ph.minutes) OVER (PARTITION BY ph.player_id ORDER BY ph.round) AS cumsum_minutes,
        SUM(ph.total_points) OVER (PARTITION BY ph.player_id ORDER BY ph.round) AS cumsum_points,
        SUM(ph.ict_index) OVER (PARTITION BY ph.player_id ORDER BY ph.round) AS cumsum_ict_index

    FROM players_hist ph
    JOIN player_totals totals ON ph.player_id = totals.player_id
    LEFT JOIN players p ON ph.player_id = p.player_id
    LEFT JOIN teams t ON ph.team_id = t.team_id
    LEFT JOIN positions pos ON ph.position_id = pos.position_id
    LEFT JOIN teams op_t ON ph.opponent_team = op_t.team_id

    ORDER BY ph.player_id, ph.round;

player_info_at_gameweek:
  type: kedro_datasets.pandas.SQLQueryDataset
  credentials: db_credentials
  sql: >
    SELECT 
      ph.player_name,
      ph.ict_index,
      ph.transfers_in,
      ph.selected,
      ph.team_id,
      ph.position_id
    FROM players_hist ph
    WHERE ph.round = ${globals:gameweek}
  # load_args:
  #   params:
  #     - ${params:gameweek}



    

current_team:
  type: pandas.SQLQueryDataset
  credentials: db_credentials
  sql: |
    SELECT 

    ct.player_id,
    ct.position_id,
    ct.selling_price,
    ct.purchase_price,
    p.player_name,
    p.total_points,
    p.minutes AS total_minutes,
    p.now_cost,
    p.selected_by_percent,
    p.transfers_in,	
    p.transfers_out,
    p.team_id,
    p.chance_of_playing_next_round,
    p.form,
    p.web_name,
    p.first_name,
    p.second_name,
    p.points_per_game,
    pos.position_name,
    pos.singular_name_short AS position_name_abbr,

    FROM my_current_team ct
    LEFT JOIN players p ON p.player_id = ct.player_id
    LEFT JOIN positions pos ON ct.position_id = pos.position_id
 